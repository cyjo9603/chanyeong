# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CoreResponse {
  ok: Boolean!
  error: String
}

type Experience {
  id: Int!
  title: String!
  content: String!
  startDate: String!
  endDate: String
}

type GetExperiences {
  ok: Boolean!
  error: String
  experiences: [Experience!]
}

type Post {
  id: Int!
  category: PostCategory!
  title: String!
  content: String!
  titleImage: String
  picked: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: [Tag!]
}

enum PostCategory {
  DIARY
  DEV
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Skill {
  id: Int!
  type: SkillType!
  name: String!
  level: Int!
  description: String!
  icon: String!
  order: Int!
}

enum SkillType {
  FRONT_END
  BACK_END
  DEV_OPS
}

type Project {
  id: Int!
  type: ProjectType!
  groupName: String
  title: String!
  description: String!
  content: String!
  startDate: String!
  endDate: String
  githubAddr: String
  titleImage: String
  contribution: Int
  picked: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  skills: [Skill!]
}

enum ProjectType {
  PERSONAL
  GROUP
}

type Tag {
  id: Int!
  name: String!
}

type TagWithCount {
  id: Int!
  name: String!
  count: Int!
}

type GetTagsResponse {
  ok: Boolean!
  error: String
  tags: [TagWithCount!]
}

type GetPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type PostsResponse {
  ok: Boolean!
  error: String
  posts: [Post!]
}

type ProjectsResponse {
  ok: Boolean!
  error: String
  projects: [Project!]
}

type GetProjectResponse {
  ok: Boolean!
  error: String
  project: Project
}

type GroupedSkills {
  ok: Boolean!
  error: String
  front: [Skill!]!
  back: [Skill!]!
  devops: [Skill!]!
}

type GetGroupedSkillsResponse {
  ok: Boolean!
  error: String
  skills: GroupedSkills
}

type GetSkillsResponse {
  ok: Boolean!
  error: String
  skills: [Skill!]
}

type UserInfo {
  id: Int!
  familyName: String!
  givenName: String!
}

type GetUserInfoResponse {
  ok: Boolean!
  error: String
  user: UserInfo
}

type SigninResponse {
  ok: Boolean!
  error: String
  userName: String
}

type Query {
  getExperiences: GetExperiences!
  getPost(input: InputId!): GetPostResponse!
  getPosts(input: InputGetPosts!): PostsResponse!
  getPickedPosts: PostsResponse!
  searchPosts(input: InputSearchPosts!): PostsResponse!
  getTags: GetTagsResponse!
  getProject(input: InputId!): GetProjectResponse!
  getProjects(input: InputGetProjects!): ProjectsResponse!
  getPickedProjects: ProjectsResponse!
  getSkills(input: InputGetSkills): GetSkillsResponse!
  getGroupedSkills: GetGroupedSkillsResponse!
  getUserInfo: GetUserInfoResponse!
}

input InputId {
  id: Int!
}

input InputGetPosts {
  lastId: Int
  tagId: Int
  category: PostCategory
}

input InputSearchPosts {
  searchWord: String!
  lastId: Int
}

input InputGetProjects {
  type: ProjectType!
}

input InputGetSkills {
  type: SkillType!
}

type Mutation {
  addExperience(input: InputAddExperience!): CoreResponse!
  editExperience(input: InputEditExperience!): CoreResponse!
  deleteExperience(input: InputId!): CoreResponse!
  writePost(input: InputWritePost!): CoreResponse!
  editPost(input: InputEditPost!): CoreResponse!
  deletePost(input: InputId!): CoreResponse!
  fixPost(input: InputFix!): CoreResponse!
  addProject(input: InputAddProject!): CoreResponse!
  updateProject(input: InputUpdateProject!): CoreResponse!
  deleteProject(input: InputId!): CoreResponse!
  fixProject(input: InputFix!): CoreResponse!
  addSkill(input: InputAddSkill!): CoreResponse!
  deleteSkill(input: InputId!): CoreResponse!
  updateSkill(input: InputUpdateSkill!): CoreResponse!
  signup(input: InputSignup!): CoreResponse!
  editUserInfo(input: InputEditUserInfo!): CoreResponse!
  signin(input: InputSignin!): SigninResponse!
  refresh: CoreResponse!
  logout: CoreResponse!
}

input InputAddExperience {
  title: String!
  content: String!
  startDate: String!
  endDate: String
}

input InputEditExperience {
  title: String
  content: String
  startDate: String
  endDate: String
  id: Int!
}

input InputWritePost {
  category: PostCategory!
  title: String!
  content: String!
  titleImage: String
  tags: [String!]!
}

input InputEditPost {
  category: PostCategory
  title: String
  content: String
  titleImage: String
  id: Int!
  deleteTags: [Int!]
  addTags: [String!]
}

input InputFix {
  id: Int!
  fix: Boolean!
}

input InputAddProject {
  type: ProjectType!
  groupName: String
  title: String!
  description: String!
  content: String!
  startDate: String!
  endDate: String
  githubAddr: String
  titleImage: String
  contribution: Int
  skillIds: [Int!]
}

input InputUpdateProject {
  groupName: String
  description: String
  content: String
  endDate: String
  githubAddr: String
  titleImage: String
  contribution: Int
  id: Int!
  deleteSkills: [Int!]
  addSkills: [Int!]
}

input InputAddSkill {
  type: SkillType!
  name: String!
  level: Int!
  description: String!
  icon: String!
  order: Int!
}

input InputUpdateSkill {
  type: SkillType
  name: String
  level: Int
  description: String
  icon: String
  order: Int
  id: Int!
}

input InputSignup {
  userId: String!
  password: String!
  familyName: String!
  givenName: String!
}

input InputEditUserInfo {
  level: UserLevel
  password: String
  familyName: String
  givenName: String
  id: Int!
}

enum UserLevel {
  ADMIN
}

input InputSignin {
  userId: String!
  password: String!
}
